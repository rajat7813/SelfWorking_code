AWSTemplateFormatVersion: 2010-09-09

Description: > 
  Creates the VPC, subnets, internet gateway and optionally nat gateways

Parameters:

  NamePrefix:
    Description: Prefix added to the name of resources created in this stack
    Type: String

  VpcCidrBlock:
    Description: The CIDR Block for the VPC
    #Type: 'AWS::SSM::Parameter::Value<String>'
    Type: String
    AllowedPattern: '^((\d{1,3})\.){3}\d{1,3}/\d{1,2}$'

#  CreateTransitGatewayAttachment:
#    Description: Option to create the transit gateway attachment to the central egress VPC, when false local NAT gateways are created instead
#    Type: 'AWS::SSM::Parameter::Value<String>'
#    AllowedValues:
#       - true
#       - false
#    ConstraintDescription: Whether or not to create

  TransitGatewayId: 
    Description: The ID of the central transit gateway
    Default: tgw-0d21059e2115ff7b8
    Type: String

  LogRetentionDays:
    #Type: 'AWS::SSM::Parameter::Value<String>'
    Type: String
    Description: Number of days of Log retention of CloudWatch
    Default: 7
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

# Conditions: 

  # CreateTransitGatewayResources: !Equals [ !Ref CreateTransitGatewayAttachment, true ]
  # CreateNATGatewayResources: !Not [!Equals [ !Ref CreateTransitGatewayAttachment, true ]]

Resources:

  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-vpc

  FlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/${NamePrefix}/flow-logs'
      RetentionInDays: !Ref LogRetentionDays

  FlowLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${NamePrefix}-vpc-flow-log-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: flow-logs-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'
      Tags:
        - Key: service
          Value: !Ref NamePrefix

  FlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogsRole.Arn
      LogGroupName: !Ref FlowLogsGroup
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 9, 5 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-public-subnet1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 9, 5 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-public-subnet2

  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt Vpc.CidrBlock, 9, 5 ]]
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-public-subnet3

  AppSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt Vpc.CidrBlock, 9, 5 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-app-subnet1

  AppSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt Vpc.CidrBlock, 9, 5 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-app-subnet2

  AppSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt Vpc.CidrBlock, 9, 5 ]]
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-app-subnet3

  DataSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 6, !Cidr [ !GetAtt Vpc.CidrBlock, 9, 5 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-data-subnet1

  DataSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 7, !Cidr [ !GetAtt Vpc.CidrBlock, 9, 5 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-data-subnet2

  DataSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 8, !Cidr [ !GetAtt Vpc.CidrBlock, 9, 5 ]]
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-data-subnet3

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-internet-gateway
        - Key: service
          Value: !Ref NamePrefix

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-public-route-table
        - Key: service
          Value: !Ref NamePrefix
          
  RouteInternetGateway:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway

  PublicSubnetAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnetAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnetAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  AppPrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-app-route-table1

  AppPrivateSubnetAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref AppPrivateRouteTable1
      SubnetId: !Ref AppSubnet1

  AppPrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-app-route-table2

  AppPrivateSubnetAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref AppPrivateRouteTable2
      SubnetId: !Ref AppSubnet2

  AppPrivateRouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-app-route-table3

  AppPrivateSubnetAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref AppPrivateRouteTable3
      SubnetId: !Ref AppSubnet3

  TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    #Condition: CreateTransitGatewayResources
    Properties: 
      SubnetIds: 
        - !Ref AppSubnet1
        - !Ref AppSubnet2
        - !Ref AppSubnet3
      TransitGatewayId: !Ref TransitGatewayId
      VpcId: !Ref Vpc
      Tags: 
        - Key: Name
          Value: !Sub ${NamePrefix}

  RouteTransitGateway1:
    Type: 'AWS::EC2::Route'
    #Condition: CreateTransitGatewayResources
    DependsOn:
      - TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref AppPrivateRouteTable1
      TransitGatewayId: !Ref TransitGatewayId

  RouteTransitGateway2:
    Type: 'AWS::EC2::Route'
    #Condition: CreateTransitGatewayResources
    DependsOn:
      - TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref AppPrivateRouteTable2
      TransitGatewayId: !Ref TransitGatewayId

  RouteTransitGateway3:
    Type: 'AWS::EC2::Route'
    #Condition: CreateTransitGatewayResources
    DependsOn:
      - TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref AppPrivateRouteTable3
      TransitGatewayId: !Ref TransitGatewayId

#  NatGateway1EIP:
#    Type: 'AWS::EC2::EIP'
#    Condition: CreateNATGatewayResources
#    DependsOn:
#      - VPCGatewayAttachment
#    Properties:
#      Domain: vpc

  # NatGateway1:
    # Type: 'AWS::EC2::NatGateway'
    # Condition: CreateNATGatewayResources
    # DependsOn:
      # - VPCGatewayAttachment
    # Properties:
      # AllocationId: !GetAtt NatGateway1EIP.AllocationId
      # SubnetId: !Ref PublicSubnet1
      # Tags:
        # - Key: Name
          # Value: !Sub ${NamePrefix}-nat-gateway1

  # RouteNatGateway1:
    # Type: 'AWS::EC2::Route'
    # Condition: CreateNATGatewayResources
    # Properties:
      # DestinationCidrBlock: '0.0.0.0/0'
      # RouteTableId: !Ref AppPrivateRouteTable1
      # NatGatewayId: !Ref NatGateway1

  # NatGateway2EIP:
    # Type: 'AWS::EC2::EIP'
    # Condition: CreateNATGatewayResources
    # DependsOn:
      # - VPCGatewayAttachment
    # Properties:
      # Domain: vpc

  # NatGateway2:
    # Type: 'AWS::EC2::NatGateway'
    # Condition: CreateNATGatewayResources
    # DependsOn:
      # - VPCGatewayAttachment
    # Properties:
      # AllocationId: !GetAtt NatGateway2EIP.AllocationId
      # SubnetId: !Ref PublicSubnet2
      # Tags:
        # - Key: Name
          # Value: !Sub ${NamePrefix}-nat-gateway2

  # RouteNatGateway2:
    # Type: 'AWS::EC2::Route'
    # Condition: CreateNATGatewayResources
    # Properties:
      # DestinationCidrBlock: '0.0.0.0/0'
      # RouteTableId: !Ref AppPrivateRouteTable2
      # NatGatewayId: !Ref NatGateway2

  # NatGateway3EIP:
    # Type: 'AWS::EC2::EIP'
    # Condition: CreateNATGatewayResources
    # DependsOn:
      # - VPCGatewayAttachment
    # Properties:
      # Domain: vpc

  # NatGateway3:
    # Type: 'AWS::EC2::NatGateway'
    # Condition: CreateNATGatewayResources
    # DependsOn:
      # - VPCGatewayAttachment
    # Properties:
      # AllocationId: !GetAtt NatGateway3EIP.AllocationId
      # SubnetId: !Ref PublicSubnet3
      # Tags:
        # - Key: Name
          # Value: !Sub ${NamePrefix}-nat-gateway3

  # RouteNatGateway3:
    # Type: 'AWS::EC2::Route'
    # Condition: CreateNATGatewayResources
    # Properties:
      # DestinationCidrBlock: '0.0.0.0/0'
      # RouteTableId: !Ref AppPrivateRouteTable3
      # NatGatewayId: !Ref NatGateway3

  DataPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-data-route-table
          
  RouteDataTransitGateway:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref DataPrivateRouteTable
      TransitGatewayId: !Ref TransitGatewayId          

  DataPrivateSubnetAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref DataPrivateRouteTable
      SubnetId: !Ref DataSubnet1

  DataPrivateSubnetAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref DataPrivateRouteTable
      SubnetId: !Ref DataSubnet2

  DataPrivateSubnetAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref DataPrivateRouteTable
      SubnetId: !Ref DataSubnet3

  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: 
              - s3:ListObject
              - s3:GetObject
              - s3:PutObject
            Resource: 
              - 'arn:aws:s3:::*'
      RouteTableIds:
        - !Ref AppPrivateRouteTable1
        - !Ref AppPrivateRouteTable2
        - !Ref AppPrivateRouteTable3
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Manages the access to the VPC endpoints
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: Ingress port of the endpoints
          IpProtocol: tcp
          CidrIp: !Ref VpcCidrBlock
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - Description: Egress port of the endpoints
          IpProtocol: tcp
          CidrIp: 127.0.0.1/32
          FromPort: 0
          ToPort: 0
      Tags:
      - Key: Name
        Value: !Sub '${NamePrefix}-endpoints-sg'

  EcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SecurityGroupIds: 
        - !Ref EndpointSecurityGroup
      SubnetIds: 
        - !Ref AppSubnet1
        - !Ref AppSubnet2
        - !Ref AppSubnet3
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.dkr"
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true

  EcrApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SecurityGroupIds: 
        - !Ref EndpointSecurityGroup
      SubnetIds: 
        - !Ref AppSubnet1
        - !Ref AppSubnet2
        - !Ref AppSubnet3
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.api"
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true

  SecretManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SecurityGroupIds: 
        - !Ref EndpointSecurityGroup
      SubnetIds: 
        - !Ref AppSubnet1
        - !Ref AppSubnet2
        - !Ref AppSubnet3
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true

  SsmEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SecurityGroupIds: 
        - !Ref EndpointSecurityGroup
      SubnetIds: 
        - !Ref AppSubnet1
        - !Ref AppSubnet2
        - !Ref AppSubnet3
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true

  CloudWatchEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SecurityGroupIds: 
        - !Ref EndpointSecurityGroup
      SubnetIds:
        - !Ref AppSubnet1
        - !Ref AppSubnet2
        - !Ref AppSubnet3
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true

  LogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${NamePrefix}-logs-${AWS::Region}-${AWS::AccountId}
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: StandardPolicy
            Status: Enabled
            ExpirationInDays: !Ref LogRetentionDays

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Id: !Sub ${NamePrefix}-logs-bucket-policy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 
              - s3:ListBucket
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
            Resource: 
              - !Sub arn:aws:s3:::${LogsBucket}
              - !Sub arn:aws:s3:::${LogsBucket}/*
          - Effect: Allow
            Principal:
              AWS: 
                - arn:aws:iam::054676820928:root
                - arn:aws:iam::652711504416:root
            Action: 
              - s3:PutObject
            Resource: 
              - !Sub arn:aws:s3:::${LogsBucket}/*
          - Effect: Allow
            Principal: 
              Service: 
                - !Sub logs.${AWS::Region}.amazonaws.com
                - delivery.logs.amazonaws.com
            Action: 
              - s3:GetBucketAcl
            Resource: 
              - !Sub arn:aws:s3:::${LogsBucket}
          - Effect: Allow
            Principal: 
              Service: 
                - !Sub logs.${AWS::Region}.amazonaws.com
                - delivery.logs.amazonaws.com
            Action: 
              - s3:PutObject
            Resource: 
              - !Sub arn:aws:s3:::${LogsBucket}/*
            Condition: 
              StringEquals: 
                's3:x-amz-acl': 'bucket-owner-full-control'

Outputs:

  VpcId:
    Description: "The VPC ID for Vpc"
    Value: !Ref Vpc

  VpcCidrBlock:
    Description: "The VPC Cidr"
    Value: !Ref VpcCidrBlock   

  PublicSubnet1Id:
    Description: "The public Subnet ID 1"
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: "The public Subnet ID 2"
    Value: !Ref PublicSubnet2

  PublicSubnet3Id:
    Description: "The public Subnet ID 3"
    Value: !Ref PublicSubnet3

  AppSubnet1Id:
    Description: "The app Subnet ID 1"
    Value: !Ref AppSubnet1

  AppSubnet2Id:
    Description: "The app Subnet ID 2"
    Value: !Ref AppSubnet2

  AppSubnet3Id:
    Description: "The app Subnet ID 3"
    Value: !Ref AppSubnet3

  DataSubnet1Id:
    Description: "The data Subnet ID 1"
    Value: !Ref DataSubnet1
    
  DataSubnet2Id:
    Description: "The data Subnet ID 2"
    Value: !Ref DataSubnet2
    Export:
      Name: !Sub ${NamePrefix}-DataSubnet2Id

  DataSubnet3Id:
    Description: "The data Subnet ID 3"
    Value: !Ref DataSubnet3

  LogsBucket:
    Description: "The name of the logs bucket"
    Value: !Ref LogsBucket

  LogsBucketArn:
    Value: !GetAtt LogsBucket.Arn

  EndpointSecurityGroup:
    Description: "The Id of the Endpoint security group"
    Value: !GetAtt EndpointSecurityGroup.GroupId
    Export:
      Name: !Sub ${NamePrefix}-EndpointSecurityGroup
      
  DataSubnetList:
    Description: "The data Subnets list"
    Value: !Sub ${DataSubnet1},${DataSubnet2},${DataSubnet3}
    Export:
      Name: !Sub ${NamePrefix}-DataSubnetList
      
  AppSubnetList:
    Description: "The data Subnets list"
    Value: !Sub ${AppSubnet1},${AppSubnet2},${AppSubnet3}
    Export:
      Name: !Sub ${NamePrefix}-AppSubnetList
      
      
