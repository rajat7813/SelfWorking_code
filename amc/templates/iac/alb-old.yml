AWSTemplateFormatVersion: 2010-09-09

Description: > 
  Deploys the load balancer part of the AMC eADR web application

Parameters:

  NamePrefix:
    Description: Prefix added to the name of resources created in this stack
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The Vpc Id

  VpcCidrBlock:
    Description: 'The CIDR Block for the VPC'
    Type: String
    AllowedPattern: '^((\d{1,3})\.){3}\d{1,3}/\d{1,2}$'

  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Elastic Load Balancer subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Elastic Load Balancer subnet 2

  EnableHttps:
    Description: Enable https or http
    Type: String
    AllowedValues: [true, false]
    Default: true

  DnsSubDomain:
    Description: The DNS subdomain name (DnsSubDomain.HostedZoneName)
    Type: String

  HostedZoneName:
    Description: The public hosted zone ID
    Type: String

  CertificateArn:
    Description: The ARN of the https certificate
    Type: String

  LogsBucket:
    Type: String
    Description: The name of the logs bucket

Conditions:

  EnableHttps: !Equals [!Ref EnableHttps, true]
  EnableHttp: !Equals [!Ref EnableHttps, false]

Resources:

  LoadBalancerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${NamePrefix}-loadbalancing-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - elasticloadbalancing.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: !Sub '${NamePrefix}-${ShortName}-policy'
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource:
              - !Sub 
                  'arn:aws:s3:::${LogsBucket}'
              - !Sub 
                  'arn:aws:s3:::${LogsBucket}/*'

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the AMC Clause Generator web application
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - Description: Egress port of the target groups
          IpProtocol: tcp
          CidrIp: !Ref VpcCidrBlock
          FromPort: 8080
          ToPort: 8080
      Tags:
      - Key: Name
        Value: !Sub '${NamePrefix}-${ShortName}-sg'

  SecurityGroupIngressHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: EnableHttp
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      Description: Ingress port of the listner from global ip range
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  SecurityGroupIngressHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: EnableHttps
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      Description: Ingress port of the listner from WIPO ip range
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  SecurityGroupCodeBuildIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      Description: Ingress port of the listner from AWS CodeBuild ip range (https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html) 
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 34.250.63.248/29

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: 'internet-facing'
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      - Key: access_logs.s3.enabled
        Value: 'true'
      - Key: access_logs.s3.bucket
        Value: !Ref LogsBucket
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      SecurityGroups: 
      - !Ref SecurityGroup

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: EnableHttp
    Properties:
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig: 
            ContentType: text/html
            StatusCode: '404'
            MessageBody: '<html><head><title>HTTP 404</title></head><body><h1>404 Not Found</h1></body></html>'

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: EnableHttps
    Properties:
      Certificates:
      - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig: 
            ContentType: text/html
            StatusCode: '404'
            MessageBody: '<html><head><title>HTTP 404</title></head><body><h1>404 Not Found</h1></body></html>'
      LoadBalancerArn: !Ref Alb
      Port: 443
      Protocol: HTTPS

  RedirectHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: EnableHttps
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Protocol: HTTPS
          StatusCode: HTTP_301
          Port: '443'
          Host: "#{host}"
          Path: "/#{path}"
          Query: "#{query}"
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP           

  # DNSRecord:
    # Type: AWS::Route53::RecordSet
    # Condition: EnableHttps
    # Properties:
      # HostedZoneName: !Ref HostedZoneName
      # Name: !Sub ${HostedZoneName}
      # AliasTarget:
        # DNSName: !GetAtt Alb.DNSName
        # HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
      # Type: A
            
Outputs:

  SecurityGroupId:
    Description: "The Id of the Alb security group"
    Value: !GetAtt SecurityGroup.GroupId

  Name:
    Description: "The Name of the Alb"
    Value: !GetAtt Alb.LoadBalancerName

  Arn:
    Description: "The ARN of the Alb"
    Value: !Ref Alb
  
  HostedZoneID:
    Description: "The HostedZoneId of the Alb"
    Value: !GetAtt Alb.CanonicalHostedZoneID
      

  DNSName:
    Description: "The DNS Name of the Alb"
    #Value: !If [EnableHttps, !Ref DNSRecord, !GetAtt Alb.DNSName]
    Value: !GetAtt Alb.DNSName

  # Url:
    # Description: "The URL of the Alb"
    # Value:
      # Fn::Join:
            # - ''
            # - - !If [EnableHttps, https, http]
              # - '://'
              # - !If [EnableHttps, !Ref DNSRecord, !GetAtt Alb.DNSName]
              # - '/eadr'

  ListenerArn:
    Description: "The ARN of Alb listner"
    Value: !If [EnableHttps, !Ref HttpsListener, !Ref HttpListener]